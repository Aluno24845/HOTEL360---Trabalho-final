@model HOTEL360___Trabalho_final.Models.Reservas

@{
    ViewData["Title"] = "Adicionar Reserva";
}

<h1>Adicionar uma nova Reserva</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                @*
                Vamos usar a variável auxiliar para ler os dados
                do VALORPAGO para evitar os constrangimentos do
                processamento de vars. do tipo DECIMAL
                *@
                <label asp-for="ValorPagoAux" class="control-label"></label>
                <input asp-for="ValorPagoAux" class="form-control" />
                <span asp-validation-for="ValorPagoAux" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DataCheckIN" class="control-label"></label>
                <input asp-for="DataCheckIN" id="dataCheckIN" class="form-control" type="datetime-local" />
                <span asp-validation-for="DataCheckIN" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DataCheckOUT" class="control-label"></label>
                <input asp-for="DataCheckOUT" id="dataCheckOUT" class="form-control" type="datetime-local" />
                <span asp-validation-for="DataCheckOUT" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quarto" class="control-label"></label>
                <select asp-for="QuartoFK" class ="form-control" asp-items="ViewBag.QuartoFK">
                    <option value="-1">-- Escolha um quarto --</option>
                </select>
            </div>

            @* listar os serviços *@
            <div class="form-group">
                <label class="control-label">Serviços</label>
                @foreach (var serv in (List<Servicos>)ViewData["listaServicos"] ?? Enumerable.Empty<Servicos>())
                {
                    <div class="form-check">
                        <input class="form-check-input"
                               type="checkbox"
                               value="@serv.Id"
                               name="escolhaServicos">
                        <label class="form-check-label" for="flexCheckDefault">
                            @serv.Nome
                        </label>
                    </div>
                }

            </div>
            @* Caso seja um Gerente ou um Reccecionista escolhe o Hospede para associar à reserva*@
             @if (User.IsInRole("Gerentes") || User.IsInRole("Reccecionistas")){
                <div class="form-group">
                    <label asp-for="Hospede" class="control-label"></label>
                    <select asp-for="HospedeId" class="form-control" asp-items="ViewBag.HospedeId">
                        <option value="-1">-- Escolha um hospede --</option>
                    </select>
                </div>
             }
            <div class="form-group">
                <br />
                <input type="submit" value="Adicionar" class="btn btn-primary" />
                <br />
            </div>
        </form>
    </div>
</div>

<div>
    <br />
    <a asp-action="Index">Regressar à listagem das Reservas</a>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dataCheckIN = document.getElementById("dataCheckIN");
            const dataCheckOUT = document.getElementById("dataCheckOUT");

            dataCheckIN.addEventListener("change", function () {
                const checkInDate = new Date(dataCheckIN.value);

                // Restrição de horário para check-in entre 8h e 23h
                if (checkInDate.getHours() < 8 || checkInDate.getHours() >= 23) {
                    alert("A hora de check-in deve estar entre 8h e 23h.");
                    dataCheckIN.value = ''; // Limpa o valor se estiver fora do horário permitido
                    return;
                }

                checkInDate.setDate(checkInDate.getDate() + 1); // Incrementa o dia em 1
                checkInDate.setHours(5, 0, 0, 0); // Define a hora para 5h da manhã do dia seguinte
                const minCheckOutDate = checkInDate.toISOString().slice(0, 16); // Formata a data para datetime-local
                dataCheckOUT.min = minCheckOutDate;
            });

            dataCheckOUT.addEventListener("change", function () {
                const checkOutDate = new Date(dataCheckOUT.value);

                // Restrição de horário para check-out entre 5h e 17h
                if (checkOutDate.getHours() < 5 || checkOutDate.getHours() >= 17) {
                    alert("A hora de check-out deve estar entre 5h e 17h.");
                    dataCheckOUT.value = ''; // Limpa o valor se estiver fora do horário permitido
                    return;
                }
            });
        });
    </script>
}
