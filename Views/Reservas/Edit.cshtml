@model HOTEL360___Trabalho_final.Models.Reservas

@{
    ViewData["Title"] = "Editar Reserva";
}

<br />
<h1 style="color: #fff;">Editar Reserva</h1>


<div class="row">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="row no-gutters">
                <div class="col-md-12">
                    <div class="card-body">
                        <form asp-action="Edit">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <input type="hidden" asp-for="Id" />                            
                            <input type="hidden" id="DataCheckINHidden" name="DataCheckINHidden" value="@Model.DataCheckIN.ToString("yyyy-MM-ddTHH:mm")" />
                            <input type="hidden" id="DataCheckOUTHidden" name="DataCheckOUTHidden" value="@Model.DataCheckOUT.ToString("yyyy-MM-ddTHH:mm")">

                            <input type="hidden" id="QuartoFKHidden" name="QuartoFKHidden" value="@Model.QuartoFK" )" />

                            <div class="form-group">
                                <label asp-for="DataReserva" class="control-label"></label>
                                <span class="form-control">@Model.DataReserva.ToString("dd/MM/yyyy")</span>
                            </div>


                            <div class="form-group">
                                <label asp-for="DataCheckIN" class="control-label"></label>
                                <input asp-for="DataCheckIN" id="dataCheckIN" class="form-control" type="datetime-local" value="@Model.DataCheckIN.ToString("yyyy-MM-ddTHH:mm")" />
                                <span asp-validation-for="DataCheckIN" class="text-danger"></span>

                            </div>
                            <div class="form-group">
                                <label asp-for="DataCheckOUT" class="control-label"></label>
                                <input asp-for="DataCheckOUT" id="dataCheckOUT" class="form-control" type="datetime-local" value="@Model.DataCheckOUT.ToString("yyyy-MM-ddTHH:mm")" />
                                <span asp-validation-for="DataCheckOUT" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Quarto" class="control-label"></label>
                                <select asp-for="QuartoFK" id="QuartoFK" class="form-control" asp-items="ViewBag.QuartoFK">
                                </select>
                            </div>

                            @* listar os serviços *@
                            <div class="form-group">
                                <label class="control-label">Serviços</label>
                                @foreach (var serv in (List<Servicos>)ViewData["listaServicos"] ?? Enumerable.Empty<Servicos>())
                                {
                                    <div class="form-check">
                                        <input class="form-check-input servicos-selecionados"
                                               type="checkbox"
                                               data-preco="@serv.Preco"
                                               value="@serv.Id"
                                               name="escolhaServicos"
                                        @(((List<int>)ViewData["servicosSelecionados"]).Contains(serv.Id) ? "checked" : "")>
                                        <label class="form-check-label" for="flexCheckDefault">
                                            @serv.Nome
                                        </label>
                                    </div>
                                }
                            </div>
                            @* Caso seja um Gerente ou um Reccecionista escolhe o Hospede para associar à reserva*@
                            @if (User.IsInRole("Gerentes") || User.IsInRole("Reccecionistas"))
                            {
                                <div class="form-group">
                                    <label asp-for="Hospede" class="control-label"></label>
                                    <span class="form-control">@Model.Hospede.Nome<span>
                                </div>
                            }
                            <div class="form-group">
                                <label asp-for="ValorPagoAux" class="control-label"></label>
                                <input asp-for="ValorPagoAux" class="form-control" />
                                <span asp-validation-for="ValorPagoAux" class="text-danger"></span>
                            </div>
                            <hr />
                            <div class="form-group">
                                <label>Valor Total </label>
                                <span id="valorTotal"></span>
                            </div>

                            <div class="form-group">
                                <br />
                                <input id="buttonsubmit" type="submit" value="Guardar" class="btn btn-primary" />
                                <a class="btn btn-secondary" asp-action="Index">Regressar à listagem de Reservas</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        // Definiição de variáveis e constantes
        var listaTodosOsQuartos = @Html.Raw(Json.Serialize(@ViewBag.Quartos));
        var numeroDeDias = 0;
        var precoQuarto = parseFloat("@Model.Quarto.Preco");
        var valorTotal = 0;
        const dataCheckIN = document.getElementById("dataCheckIN");
        const dataCheckOUT = document.getElementById("dataCheckOUT");
        const quartoDropdown = document.getElementById("QuartoFK")
        const quartoSelecionado = quartoDropdown.value;
        const dataCheckInInicial = new Date(dataCheckIN.value);
        const dataCheckOutInicial = new Date(dataCheckOUT.value);

        // só ativa o dropdown de quartos se as datas de checkin e checkout estiverem preenchidas
        function activarQuartoDropdown() {
            if (!dataCheckIN.value || !dataCheckOUT.value) {
                quartoDropdown.disabled = true
                return
            }
            else

                quartoDropdown.disabled = false

            const quartosDisponiveis = [];

            const checkInDate = new Date(dataCheckIN.value);
            const checkOutDate = new Date(dataCheckOUT.value);

            // Verifica se o quarto está ocupado
            for (const quarto of listaTodosOsQuartos) {
                const quartoOcupado = quarto.reservas.some(reserva => {
                    const reservaCheckIn = new Date(reserva.dataCheckIN);
                    const reservaCheckOut = new Date(reserva.dataCheckOUT);
                    return (
                        (checkInDate >= reservaCheckIn && checkInDate < reservaCheckOut) ||
                        (checkOutDate > reservaCheckIn && checkOutDate <= reservaCheckOut) ||
                        (checkInDate <= reservaCheckIn && checkOutDate >= reservaCheckOut)
                    );
                });

                if (!quartoOcupado) {
                    quartosDisponiveis.push(quarto);
                }
            }

            console.log(quartosDisponiveis)

            var opcoesQuartos = document.querySelectorAll('#QuartoFK option');

            opcoesQuartos.forEach(function (opcao) {

                if ((opcao.value != "-1" && quartoSelecionado != opcao.value)) {
                    opcao.remove();
                }

                if (quartoSelecionado == opcao.value) {
                    if (!(dataCheckInInicial <= new Date(dataCheckIN.value) && dataCheckOutInicial >= new Date(dataCheckOUT.value))) {

                        opcao.remove();
                        precoQuarto = 0;
                    }
                }
            });

            // Atualiza o dropdown de quartos com os quartos disponíveis
            for (const quarto of quartosDisponiveis) {
                const option = document.createElement('option');
                option.value = quarto.id;
                option.text = quarto.nome;
                quartoDropdown.appendChild(option);
            }



        }

        activarQuartoDropdown();

        // Função para contar os dias entre duas datas
        function contarDiasEntreDuasDatas(date1, date2) {
            const oneDay = 24 * 60 * 60 * 1000; // Um dia em milisegundos
            const firstDate = new Date(date1);
            const secondDate = new Date(date2);

            // Calcula a diferença em dias
            const diferencadias = Math.round(Math.abs((firstDate - secondDate) / oneDay));

            return diferencadias;
        }

        // Função para calcular o preço TOTAL da estadia
        function calculaPrecoDaEstadia(dataInicio, dataFim) {
            const listaServicosSelectionados = document.querySelectorAll('.servicos-selecionados')
            numeroDeDias = contarDiasEntreDuasDatas(dataInicio.value, dataFim.value)

            var totalServicoPorNoite = 0;

            // Calcula o preço total dos serviços selecionados
            listaServicosSelectionados.forEach(function (servico) {
                if (servico.checked) {
                    totalServicoPorNoite += parseFloat(servico.getAttribute('data-preco'));
                }
            });

            // Calcula o preço total da estadia
            var totalServicoTodasNoites = numeroDeDias * totalServicoPorNoite;
            valorTotal = numeroDeDias * precoQuarto + totalServicoTodasNoites

            // Atualiza o valor total exibido na página
            const valorTotalElement = document.getElementById("valorTotal");
            //valorTotalElement.innerText = valorTotal.toFixed(2);
            valorTotalElement.innerText = valorTotal.toLocaleString('pt-PT', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " €";


        }


        document.addEventListener("DOMContentLoaded", function () {
            // Obtenção dos elementos do DOM
            const dataCheckIN = document.getElementById("dataCheckIN");
            const dataCheckOUT = document.getElementById("dataCheckOUT");
            const dataAtual = new Date();
            const dataCheckINDate = new Date(dataCheckIN.value);
            const dataCheckOUTDate = new Date(dataCheckOUT.value);
            const listaServicosSelectionados = document.querySelectorAll('.servicos-selecionados')
            const quartoSelecionado = document.getElementById("QuartoFK");
                        

            // Calcula o preço da estadia inicial
            calculaPrecoDaEstadia(dataCheckIN, dataCheckOUT);

            // quartoSelecionado.addEventListener('click', function (e) {
            //     if (dataCheckINDate < dataAtual) {
            //         e.preventDefault();
            //     }
            // })

            // Adiciona o evento de mudança ao dropdown de quartos
            quartoSelecionado.addEventListener('change', function () {
                console.log(quartoSelecionado.value)
                precoQuarto = parseFloat(listaTodosOsQuartos.find(x => x.id == quartoSelecionado.value).preco);
                calculaPrecoDaEstadia(dataCheckIN, dataCheckOUT);
            })

            // Adiciona o evento de mudança aos serviços selecionados
            listaServicosSelectionados.forEach(function (elemento) {
                elemento.addEventListener('click', function (e) {
                    if (dataCheckINDate < dataAtual) {
                        e.preventDefault();

                    } else {
                        calculaPrecoDaEstadia(dataCheckIN, dataCheckOUT);
                    }
                })
                elemento.addEventListener('change', function (e) {

                    calculaPrecoDaEstadia(dataCheckIN, dataCheckOUT);
                })

            })

            // Verifica se a data de Check-In já passou da data atual
            if (dataCheckINDate < dataAtual) {
                dataCheckIN.readOnly = true; // Desativa a edição da data de Check-In
                dataCheckOUT.readOnly = true; // Desativa a edição da data de Check-Out
                quartoDropdown.disabled = true; // Desativa o dropdown de quartos
            } else {
                // Define o valor mínimo do check-in como a hora atual
                const minCheckInDate = dataAtual.toISOString().slice(0, 16); // Formata a data para datetime-local
                dataCheckIN.min = minCheckInDate;

            }           
            
            // Verifica se a data de Check-Out já passou da data atual
            if (dataCheckOUTDate < dataAtual) {
                dataCheckOUT.readOnly = true;
            }
                                  

            // Adiciona o evento de clique ao botão de submissão
            document.querySelector("#buttonsubmit").addEventListener("click", function (event) {

                // verifica se pelo menos um serviço foi selecionado
                if (document.querySelectorAll('.servicos-selecionados:checked').length === 0) {
                    alert("Por favor, selecione pelo menos um serviço.");
                    event.preventDefault();
                }

                // verifica se o valor pago é superiorao valor total 
                if (parseFloat(document.getElementById("ValorPagoAux").value) >  valorTotal) {
                    alert("O valor pago não pode ser superior ao valor total da reserva.");
                    event.preventDefault();
                }

                // verifica se a data de check In é depois da data de Check Out
                if (new Date(dataCheckIN.value) >= new Date(dataCheckOUT.value)) {
                    alert("A data de check-in deve ser anterior à data de check-out.");
                    event.preventDefault();
                }
                                
            });

            // Adiciona o evento de mudança à data de Check-In
            dataCheckIN.addEventListener("change", function (e) {
                const checkInDate = new Date(dataCheckIN.value);

                // Verificação da data atual comparando com Data de Check-IN
                if (checkInDate < dataAtual) {
                    alert("A data de Check-In não pode ser antes da Data Atual");
                    e.preventDefault()
                    return;
                }

                // Restrição de horário para check-in entre 8h e 23h
                if (checkInDate.getHours() < 8 || checkInDate.getHours() >= 23) {
                    alert("A hora de check-in deve estar entre 8h e 23h.");
                    dataCheckIN.value = ''; // Limpa o valor se estiver fora do horário permitido
                    e.preventDefault()
                    return;
                }

                checkInDate.setDate(checkInDate.getDate() + 1); // Incrementa o dia em 1
                checkInDate.setHours(5, 0, 0, 0); // Define a hora para 5h da manhã do dia seguinte
                const minCheckOutDate = checkInDate.toISOString().slice(0, 16); // Formata a data para datetime-local
                dataCheckOUT.min = minCheckOutDate;
                activarQuartoDropdown()
                calculaPrecoDaEstadia(dataCheckIN, dataCheckOUT);

            });

            // Adiciona o evento de mudança à data de Check-Out
            dataCheckOUT.addEventListener("change", function (e) {

                const checkOutDate = new Date(dataCheckOUT.value);

                // Restrição de horário para check-out entre 5h e 17h
                if (checkOutDate.getHours() < 5 || checkOutDate.getHours() >= 17) {
                    alert("A hora de check-out deve estar entre 5h e 17h.");
                    dataCheckOUT.value = ''; // Limpa o valor se estiver fora do horário permitido
                    e.preventDefault()
                    return;
                }
                activarQuartoDropdown()
                calculaPrecoDaEstadia(dataCheckIN, dataCheckOUT);
            });
        });
    </script>
}
